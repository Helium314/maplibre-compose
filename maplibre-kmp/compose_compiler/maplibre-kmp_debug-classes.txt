unstable class MapControl {
  unstable var impl: MapLibreMap
  <runtime stability> = Unstable
}
unstable class Style {
  unstable var impl: Style
  <runtime stability> = Unstable
}
unstable class CircleLayer {
  stable val id: String
  stable val source: Source
  unstable val impl: CircleLayer
  <runtime stability> = Unstable
}
stable class ExpressionAdapter {
  <runtime stability> = Stable
}
stable class Layer {
  <runtime stability> = Stable
}
unstable class LineLayer {
  stable val id: String
  stable val source: Source
  unstable val impl: LineLayer
  <runtime stability> = Unstable
}
unstable class NativeLayer {
  stable val id: String
  unstable var _impl: Layer
  <runtime stability> = Unstable
}
unstable class GeoJsonSource {
  stable val id: String
  unstable val impl: GeoJsonSource
  <runtime stability> = Unstable
}
unstable class NativeSource {
  stable val id: String
  unstable var _impl: Source
  <runtime stability> = Unstable
}
stable class Source {
  <runtime stability> = Stable
}
runtime class LayerNode {
  runtime val layer: T
  stable val anchor: Anchor
  <runtime stability> = Parameter(T)
}
unstable class MapNode {
  unstable val children: MutableList<MapNode>
  <runtime stability> = Unstable
}
stable class MapNodeApplier {
  <runtime stability> = Stable
}
stable class StyleNode {
  stable val styleManager: StyleManager
  <runtime stability> = Stable
}
stable class Top {
  <runtime stability> = Stable
}
stable class Bottom {
  <runtime stability> = Stable
}
stable class Above {
  stable val layerId: String
  <runtime stability> = Stable
}
stable class Below {
  stable val layerId: String
  <runtime stability> = Stable
}
stable class CircleLayout {
  stable val sortKey: Expression<Number>
  <runtime stability> = Stable
}
stable class CirclePaint {
  stable val radius: Expression<Number>
  stable val color: Expression<Color>
  stable val blur: Expression<Number>
  stable val opacity: Expression<Number>
  stable val translate: Expression<Point>
  stable val translateAnchor: Expression<String>
  stable val pitchScale: Expression<String>
  stable val pitchAlignment: Expression<String>
  stable val strokeWidth: Expression<Number>
  stable val strokeColor: Expression<Color>
  stable val strokeOpacity: Expression<Number>
  <runtime stability> = Stable
}
stable class LineLayout {
  stable val cap: Expression<String>
  stable val join: Expression<String>
  stable val miterLimit: Expression<Number>
  stable val roundLimit: Expression<Number>
  stable val sortKey: Expression<Number>
  <runtime stability> = Stable
}
stable class LinePaint {
  stable val opacity: Expression<Number>
  stable val color: Expression<Color>
  stable val translate: Expression<Point>
  stable val translateAnchor: Expression<String>
  stable val width: Expression<Number>
  stable val gapWidth: Expression<Number>
  stable val offset: Expression<Number>
  stable val blur: Expression<Number>
  stable val dasharray: Expression<List<Number>>
  stable val pattern: Expression<TResolvedImage>
  stable val gradient: Expression<Color>
  <runtime stability> = Stable
}
stable class SourceHandle {
  stable val source: Source
  <runtime stability> = Stable
}
unstable class IncrementingId {
  stable var incrementingId: Int
  <runtime stability> = Unstable
}
stable class StyleManager {
  unstable val style: Style
  stable val sources: SnapshotStateMap<String, Source>
  stable val layers: SnapshotStateMap<String, Layer>
  unstable val layersByAnchor: MutableMap<Anchor, MutableList<Pair<Int, Layer>>>
}
stable class GeoJsonOptions {
  stable val maxZoom: Int
  stable val buffer: Int
  stable val tolerance: Float
  stable val cluster: Boolean
  stable val clusterRadius: Int
  stable val clusterMaxZoom: Int
  unstable val clusterProperties: Map<String, ClusterProperty>
  stable val lineMetrics: Boolean
}
stable class Url {
  stable val url: String
  <runtime stability> = Stable
}
stable class GeoJson {
  stable val json: String
  <runtime stability> = Stable
}
stable class Shape {
}
stable class ClusterProperty {
  stable val operator: String
  stable val mapper: Expression<*>
  <runtime stability> = Stable
}
stable class Expression {
  unstable val value: Any?
}
stable class FormatStyle {
  stable val textFont: Expression<String>?
  stable val textColor: Expression<String>?
  stable val fontScale: Expression<Number>?
  <runtime stability> = Stable
}
stable class CaseBranch {
  stable val test: Expression<Boolean>
  stable val output: Expression<Output>
  <runtime stability> = Stable
}
stable class MatchBranch {
  stable val label: Expression<*>
  stable val output: Expression<Output>
  <runtime stability> = Stable
}
stable class Point {
  unstable val x: Number
  unstable val y: Number
}
